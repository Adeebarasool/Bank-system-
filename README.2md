package sectiona.bankmanagementsystem;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class BankAccount {
    private int accountNumber;
    private String accountHolderName;
    private double balance;
    private List<Transaction> transactions;

    public BankAccount(int accountNumber, String accountHolderName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = initialBalance;
        this.transactions = new ArrayList<>();
    }

    public int getAccountNumber() {
        return accountNumber;
    }

    public String getAccountHolderName() {
        return accountHolderName;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactions.add(new Transaction("Deposit", amount, balance));
            System.out.println("Deposited: " + amount);
            System.out.println("New Balance: " + balance);
        } else {
            System.out.println("Invalid amount. Please enter a positive amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactions.add(new Transaction("Withdrawal", amount, balance));
            System.out.println("Withdrawn: " + amount);
            System.out.println("Remaining Balance: " + balance);
        } else {
            System.out.println("Invalid amount or insufficient balance.");
        }
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    @Override
    public String toString() {
        return "Account Number: " + accountNumber + ", Account Holder: " + accountHolderName + ", Balance: " + balance;
    }
}

class Transaction {
    private String type;
    private double amount;
    private double balanceAfterTransaction;

    public Transaction(String type, double amount, double balanceAfterTransaction) {
        this.type = type;
        this.amount = amount;
        this.balanceAfterTransaction = balanceAfterTransaction;
    }

    public String getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }

    public double getBalanceAfterTransaction() {
        return balanceAfterTransaction;
    }

    @Override
    public String toString() {
        return "Transaction Type: " + type + ", Amount: " + amount + ", Balance After Transaction: " + balanceAfterTransaction;
    }
}

class Customer {
    private int customerId;
    private String name;
    private String email;
    private List<BankAccount> accounts;

    public Customer(int customerId, String name, String email) {
        this.customerId = customerId;
        this.name = name;
        this.email = email;
        this.accounts = new ArrayList<>();
    }

    public int getCustomerId() {
        return customerId;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public List<BankAccount> getAccounts() {
        return accounts;
    }

    public void addAccount(BankAccount account) {
        accounts.add(account);
    }

    @Override
    public String toString() {
        return "Customer ID: " + customerId + ", Name: " + name + ", Email: " + email;
    }
}

public class BankManagementSystem {
    private List<BankAccount> accounts;
    private int nextAccountNumber;

    public BankManagementSystem() {
        accounts = new ArrayList<>();
        nextAccountNumber = 1;
    }

    public void createAccount(String accountHolderName, double initialBalance) {
        BankAccount account = new BankAccount(nextAccountNumber++, accountHolderName, initialBalance);
        accounts.add(account);
        System.out.println("Account created: " + account);
    }

    public void depositToAccount(int accountNumber, double amount) {
        BankAccount account = findAccount(accountNumber);
        if (account != null) {
            account.deposit(amount);
        } else {
            System.out.println("Account not found.");
        }
    }

    public void withdrawFromAccount(int accountNumber, double amount) {
        BankAccount account = findAccount(accountNumber);
        if (account != null) {
            account.withdraw(amount);
        } else {
            System.out.println("Account not found.");
        }
    }

    public void displayAccountDetails(int accountNumber) {
        BankAccount account = findAccount(accountNumber);
        if (account != null) {
            System.out.println("Account Details: " + account);
            System.out.println("Transactions: ");
            for (Transaction transaction : account.getTransactions()) {
                System.out.println(transaction);
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    private BankAccount findAccount(int accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return account;
            }
        }
        return null;
    }

    public void listAllAccounts() {
        if (accounts.isEmpty()) {
            System.out.println("No accounts found.");
        } else {
            System.out.println("List of all accounts:");
            for (BankAccount account : accounts) {
                System.out.println(account);
            }
        }
    }

    public static void main(String[] args) {
        BankManagementSystem bankSystem = new BankManagementSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            showMenu();
            int choice = Integer.parseInt(scanner.nextLine());
            switch (choice) {
                case 1:
                    createAccount(bankSystem, scanner);
                    break;
                case 2:
                    depositToAccount(bankSystem, scanner);
                    break;
                case 3:
                    withdrawFromAccount(bankSystem, scanner);
                    break;
                case 4:
                    displayAccountDetails(bankSystem, scanner);
                    break;
                case 5:
                    listAllAccounts(bankSystem);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void showMenu() {
        System.out.println("\n--- Bank Management System Menu ---");
        System.out.println("1. Create Account");
        System.out.println("2. Deposit to Account");
        System.out.println("3. Withdraw from Account");
        System.out.println("4. Display Account Details");
        System.out.println("5. List All Accounts");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    private static void createAccount(BankManagementSystem bankSystem, Scanner scanner) {
        System.out.print("Enter account holder name: ");
        String name = scanner.nextLine();
        System.out.print("Enter initial balance: ");
        double balance = Double.parseDouble(scanner.nextLine());
        bankSystem.createAccount(name, balance);
    }

    private static void depositToAccount(BankManagementSystem bankSystem, Scanner scanner) {
        System.out.print("Enter account number: ");
        int accountNumber = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter amount to deposit: ");
        double amount = Double.parseDouble(scanner.nextLine());
        bankSystem.depositToAccount(accountNumber, amount);
    }

    private static void withdrawFromAccount(BankManagementSystem bankSystem, Scanner scanner) {
        System.out.print("Enter account number: ");
        int accountNumber = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter amount to withdraw: ");
        double amount = Double.parseDouble(scanner.nextLine());
        bankSystem.withdrawFromAccount(accountNumber, amount);
    }

    private static void displayAccountDetails(BankManagementSystem bankSystem, Scanner scanner) {
        System.out.print("Enter account number: ");
        int accountNumber = Integer.parseInt(scanner.nextLine());
        bankSystem.displayAccountDetails(accountNumber);
    }

    private static void listAllAccounts(BankManagementSystem bankSystem) {
        bankSystem.listAllAccounts();
    }
}
